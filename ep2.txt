npm=manages the packages,repostory of all packages
react make app fast to some extent
but packages also make app fast

package.json is configuration of npm(all the data we have like author, keyword, testing etc)
dependencies=packags on whivh our project depends/package used

bundler package =bundles code to go into production
DEPENDENCIES=2types
1.dev: used in development
2.Normal:used in production also
npm install -D parcel(bundler):-d signifies parcel imported as dev dependency
"parcel": "^2.11.0":
^=to apply minor upgrade of dependency
~=to apply major upgrade of dependency(not preferred)

pkg vs pkg=lock.json:
pkg.json=configuration of npm,keeps track of the version of dependency used(have this ~^ )
pkg-lock.json=keeps track of the exact version of dependency used(exact which is used)
have integrity:ensures  version on local to be deployed on production also,so that code dont broke on production

node modules=collection of all packages and dependencies(transitive dependencies)
all the pkgs will have their own dependencies,and also have their pkg.json

node modules dont need to be put to git bcz they can be recreated again using npm install
pkg and pkg-lock,json needs to be put on git 

npx parcel index.html=local host ,server with a better url=localhost:1234 port,it is done by parcel(hosted on server)
npx=executing npm package

we can bring react and react dom into project
1.cdn not preferred bcz network calls more,version keeps chnging
2.using npm=npm install react


production build:which takes more time than dev build,dist folder m se code ata hai(both in dev build and prod build) and uses cache for decresing time
// "main": "app.js"=removed from pkg.json  bcz entry point is index.html when building through parcel =npx parcel build index.html
dist and parcelcache can be regenerated by using npx parcel index.html,so no need to put on git.

make browser olderbrowsercompatible by using in pkg.json:
  "browserslist":[
    "Firefox last 2 versions",
    "last 2 versions"
  ]